Version control helps developers track and manage changes to a software project’s code. (essential as grows). Instead of direct editing official source code, lets developers safely work through branching and merging.
With branching, a developer duplicates part of the source code (called the repository). A repository contains all of your project's files, revision history, and collaborator discussion. The developer can then safely make changes to that part of the code without affecting the rest of the project.
Then, once the developer gets his or her part of the code working properly, he or she can merge that code back into the main source code to make it official.
Git is a specific open-source version control system ,  a distributed version control system, which means that the entire codebase and history is available on every developer’s computer, which allows for easy branching and merging.
GitHub is a for-profit company that offers a cloud-based Git repository-hosting service. Essentially, it makes it a lot easier for individuals and teams to use Git for version control and collaboration. GitHub helps developers store and manage their code, as well as track and control changes to their code. 
Version control helps developers track and manage changes to a software project’s code. (essential as grows). Instead of direct editing official source code, lets developers safely work through BRANCHing and MERGing.

With BRANCHING, a developer duplicates part of the source code (called the repository). *A repository contains all of your project's files, revision history, and collaborator discussion.* The developer can then safely make changes to that part of the code without affecting the rest of the project.

Then, once the developer gets his or her part of the code working properly, he or she can MERGE that code back into the main source code to make it official.

Git -- an application you download to your computer! -- is a specific open-source version control system,  a distributed version control system, which means that the entire codebase and history is available on every developer’s computer, which allows for easy branching and merging.

GitHub -- a website! -- is a for-profit company that offers a cloud-based Git repository-hosting service. Essentially, it makes it a lot easier for individuals and teams to use Git for version control and collaboration. GitHub helps developers store and manage their code, as well as track and control changes to their code. 

pwd stands for “print working directory” (it tells me the file path of the folder I’m in in the terminal I’m in -- PWD tells what directory i'm, check that  )
The command “ls –a” (ls=list, a=all) lists all the folders I’m in – hidden etc. I’m using this to see everything in current folder I’m in (when in the terminal)

To open a new "terminal" (the black window from which you code), go to search bar and search for Git Bash -- when options come up open the app by that name. WHENEVER YOU OPEN A GIT BASH TERMINAL, IT OPENS IN YOUR HOME DIRECTORY. (it's a window into your operating system, a portal into your filing system -- a way of navigating, seeing the man behind the curtain)

(the "git init" command created a git (not git HUB) repository on my COMPUTER) (git hub is the website; git is the application on my computer)

(make a mistake IN CREATING A FOLDER? rm -rf "whateverremoving" (spaced just like that, and don't actually use the quote marks) BUT USE CAREFULLY -- dangerous command, can wipe out all if you're not careful and intentional about WHAT rm -rf-ing... (rm = remove r = recursively (in other words, doesn't just delete top level folder, but everything inside it -- PERSONAL would take out bills, etc.) and f=force -- no matter what permissions required. cannot be stopped) -- p.s., no "output" (nothing shown in screen) unless there's an error -- just gives you the next prompt

IF YOU JUST want to remove a file: rm "file name" (don't need quotes)

***Tim – need to redo video – don’t show them delete rm rf stuff it’s confusing (plus dangerous) get rid of what shouldn’t be there and do it straightforward
cd=change directory -- how i'd get where i wanna go from where i am. follow that with space then the folder you want to go in. to follow the path faster, start the folder name (starting at top) EXACTLY as written -- same capitalization -- and tab will "auto complete" (fill in rest of that part) to help get there faster  **NOTE -- if you do "cd" and enter ONLY, it will take you straight to the top...must follow it with something not to end up at the beginning. *** if you want to go to the most recent specific directory you were in, "cd -" should get you there...a second time should get you to the NEXT most recent

(and the up arrow will let you cycle through previous commands...down arrow to get back where you just were)

**USE AUTO COMPLETE REGULARLY -- it's how the computer confirms the file you're looking for is where you're looking for it**

(wanna back it up? type cd .. (no spaces between periods) and it will go back i.e. from desktop/iewetc/coding to desktop/iewetc (can do repeatedly to back up)

don't ever open a file in visual studio -- only folders

prompt= the place where you'd type. COMMAND line prompt is another way of saying it (the more coder-y way)

in git-hub (and some other sites) copy symbol upper right hand corner allows you to copy whole block of code (rather than type each line in yourself) 

mkdir command creates a folder

touch command creates a file -- has to be all one word i.e. temporarytotry (if you do touch temporary to try you just created three files)

FROM HIS FIRST YOUTUBE VIDEO: BASIC NAVIGATION= pwd, ls, cd

moving into SECOND YOUTUBE VIDEO -- what Tim needs me to be able to do is show kids how to create a github repo correctly. 

HUGE THING -- NEED TO MAKE SURE YOU'RE IN THE RIGHT PLACE BEFORE YOU CREATE A GITHUB REPO; in other words, before you copy the code under "…or create a new repository on the command line" you need to navigate to and create a place to put it that will be appropropriate (not at the top level where you naturally start) (where they want theirs, then create repos, then create my-repo in this case)

once they're past that -- they'll be making changes in the git repo (this is the final piece of the first homework: "Put the text file we created in class for notes in the git repository and push it to GitHub.")
(COME BACK HERE WHEN TIM SAYS ADD AND COMMIT AND PUSH A FILE)

Tim's basic notes from Class 2:
***Core Git Commands***
git config –list - shows your configuration
git init - creates repository
git add . - adds all the files in this folder to the staging area in git
git commit -m “my commit message” - will commit the changes in your staging area to a save point called a commit with the name “my commit message”
git push - will push your code to your repo in GitHub
git pull - will pull the changes from your GitHub repository

Below are my notes
When get there, there are three commands they only really need to deal with (A FILE THAT NEEDS TO BE ADDED TO GIT-HUB, OR IN OTHER WORDS,PUSHED TO GIT-HUB: git add, git commit, git push. (The only way they would have known this was retaining (separating it from the mass) and applying it from what was taught in class, but Tim giving me the steps, below)

*IMPORTANT* esp for this file -- every time modify it have to git add git commit git push again or will show red
10/23 reminder: this file is in ~/repos/basic-repo 

(1) move notes file into the git repo (physically go to the folder and do it -- could do it in terminal with mv, but it's a little tricky, the command hasn't been taught or emphasized -- Tim doesn't expect this to be used a lot -- so for now, do it the old school way) THIS IS WHERE THE NOTES WILL LIVE FROM HERE ON.

(2) git add is the next command we'll use; git add . will add everything in that folder to your staging area in git (on your computer, not on github website)

(git status is good to then use -- and repeatedly -- to find out what the status (what's been added, if it's ready for commit or not, etc. red not ready, empty, nothing there, green, ready to commit, etc.) is -- almost the WAY you'd use ls to keep checking what's in it. ls everything in folder; git status show you what's added but not committed yet)…will tell you if a file is in a folder

so when file is green, it's in the "staging area" -- you're ready to commit. how to:
(3) git commit -m "(nameyouwantyourcommittobeincludingwhy)" i.e. git commit -m "added file with homework 1"...literally use the quote marks. (how would you have known how to do this? not sure -- google, check with classmates, ask when you run into that sort of snag -- but honestly, i had to have Tim walk me through. we're working on it!) enter to execute -- remember use arrows to navigate there

(git status again just to see where we are)

(4) git push (that's it, nothing after) -- when hit enter should get something like this:
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 292 bytes | 292.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/MBBatty/my-repo.git
   06f4278..e14a2be  main -> main

that just communicated -- sent changes of new commit -- back to git hub, so next step is to look for it on github 
WHEN IN THE RIGHT POSITION -- NOT USING NOTEPAD, GOTTA FIGURE SOMETHING OUT (HOPEFULLY TIM AND I MONDAY BEFORE CLASS TUESDAY -- BUT WHEN IN RIGHT POSITION (THE FILE HAS TEXT IN IT) GO TO STEPs BELOW
(5) git commit -m "added content to text file"
(6) git push
(then can check in git-hub, should have content in)
(TO DELETE DIRECTORY in github: settings, very bottom, buncha steps to take -- they want it to be hard, it's a BIG error if you don't mean to)

VS Code notes – great video: 
https://code.visualstudio.com/docs/introvideos/basics
(tim question – why isn’t mine recognizing javascript – or is coffeescript some cute nickname?
important stuff (BTW outside this, alt-tab to switch between stuff): 
•	view command palatte
•	file auto save (otherwise watch for dot telling you have to command s)
•	f5 to execute
•	command n to create new file
•	(may need to install i.e. python extension to get IntelliSense for other languages etc. 
•	(got to about 3 minutes 49 seconds on first video tutorial)
(in class 10/3 – should be a cool script? – Caleb saying I could approve permissions, is that why it’s not working? http://github.com/tbatty7/example-shell-script.git
My error message:
http://github.com/tbatty7/example-shell-script.git : The term 'http://github.com/tbatty7/example-shell-script.git' is not 
recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was    
included, verify that the path is correct and try again.
At line:1 char:1
+ http://github.com/tbatty7/example-shell-script.git
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (http://github.c...hell-script.git:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
HOMEWORK – GOOGLE WHAT IS AN ENVIRONMENT VARIABLE
CREATE A REPOS FOLDER INSIDE YOUR HOME DIRECTORY – NOT TO MOVE ANYWHERE – FIRST PLACE YOU’RE IN. It’s a must. SO can stop trying to hunt. Has a first video in links of videos.
CREATE A FIRST WEB SITE
Tutorialspoint.com/html/html_basic_tags.htm
Create a github repo named basic website; inside that create a file called index.html; inside that the code he just showed us (Tutorialspoint.com/html/html_basic_tags.htm)
10-7-23 STARTING OVER FROM FIRST HOMEWORK ONLY NOW DOING FOR WINDOWS WITH VS CODE INSTEAD OF NOTEPAD
Tip: just hyphens or underscore in names of files and folders -- not periods not apostrophes etc. those can cause bugs because they can mean something different (break up a string) in different languages. Can be read as quote marks, etc. 

Tim's notes from class 2
***VIM (aka VI)
Most important commands
H, J, K L (keys for moving around)
I (for insert mode)
Esc (to stop inserting)
:wq (to save and exit)
:q! (to exit without saving)
VIM Adventures - https://vim-adventures.com/ (a website that teaches you VIM commands in the form of a game)

(my notes from with him)
Vim is a text editor built into the terminal (vi is the command that uses it)
Vi read me would open up read me 
I for insert – can type now, move around with arrows (isn’t a mouse interface)
Escape to get back to normal mode
Colon (literally : ) to go into command mode
:wq means “write and quit” (which basically means save and quit)
Git status will tell you the stage it’s in – red is modified but not in the staging area to send (not ready to be committed; not added to git-hub, basically) THEN do git add . (. stands for everything in the current folder) – then it should show green, which indicates. Then git commit git push (case matters)

HOW TO OPEN A REPO (OR A FOLDER) IN VS CODE
Open the VS Code app
Pull down from file to open folder – navigate where you want to go (when creating notes file to push to git-hub, going to basic-repo)
Make sure you’re in drop down that says name of your repo (folder) i.e. BASIC-REPO (not the top folder, open editors, which they defaulted too at least 10/7) 
(Once you’re in there you can do the below and it will go to the right place)
CAN DO…
Pull down file to New file. end it with .txt…remember no apostrophes etc only hyphen or underscore to separate words in name i.e. Reens-Notes.txt
…but easier is the little file beside that name

in vs code -- it's pull down file and save. (if needed...may be auto saving )

for homework tk
***Shell Scripts 
$ mkdir first-shell-script
$ echo '#!/bin/sh' > my-script.sh
$ echo 'echo Hello World' >> my-script.sh
$ chmod u+rx my-script.sh
$ ./my-script.sh
$ echo “the files in this folder are: ” >> my-script.sh
$ echo ls >> my-script.sh

below, to get from "create the folder" to "after you create the git repo" YOU NEED TO TURN THE FOLDER INTO A REPO -- to do that, you have to be INSIDE the new folder. so after mkdir you have to cd the new thing, THEN you'll create the git repo

(Tim's second homework)
You can create the folder on your computer from the command line by typing: 
mkdir first-shell-script
A shell script is the simplest program you can write, but can be very powerful.  Almost any command you can run in a terminal can be run in a shell script.
After you create the git repo and link it to your GitHub repo, follow these commands to create and run the shell script:

(SO after inside the new folder, "create the git repo" by (1) creating in git hub by repository create new it'll give the MBBatty/ in that space provided, mark public, create repository then create in git bash by git init)

***CREATE A REPO So it's: (1) create folder on computer (2) get in folder (3) create git repo on github (4) create on git bash by git init and (5) git add, git commit, git push to link 'em BEFORE proceed. REMEMBER -- CAN 4 AND 5 BY COPYING THE CODE PROVIDED ON GITHUB. this is ***basic

all git commands are managing git repos; that's just a fancy folder that has special capability of saving everything inside of it. so a git-init would not create ANY file, just a git repo -- turn a folder into a git repo

cat ./(name of a file) will display the contents of a file without opening it

chmod u+rx my-script.sh -- chmod gives you permission to be read (open and read it) write (edit it) or execute (run it)

***when tim asks to post a link, paste as plain text because windows converts it weird (may have to do in a word file or something if won't directly plain text)

as of 10/14/23 (before soccer) I'm done creating SSH key and ready to pick up with: 
Tim Batty
Created Oct 2Oct 2
Here are the notes from last week that I wanted to go over but did not have time.  They are mostly about the terminal and using UNIX commands to interact with it.

10/21/23 tackling Oct. 3 homework. 

Don't ever put a repo inside a repo (so almost anything, pwd to cd/mauree/repos -- but no further)

run -- running a shell script is basically just typing the name of the file and hitting enter. 

a repo is always a folder -- a special kind of folder

11:05 a.m. 10/21/23 -- pick up at Step 8 Oct. 3  homework -- need to finish adding stuff i.e. a hyperlink <a> and an image <img> using HTML tags

below from https://www.tutorialspoint.com/html/html_text_links.htm
A webpage can contain various links that take you directly to other pages and even specific parts of a given page. These links are known as hyperlinks.

Hyperlinks allow visitors to navigate between Web sites by clicking on words, phrases, and images. Thus you can create hyperlinks using text or images available on a webpage.

to actually look at the website you created go to the run and debug arrow looking thingy on the lefthand bar; from there, you can also copy the "absolute file path" so you can see what you've done in the future (run and debug may only run the first time)

***so my (first)website can be found at file:///C:/Users/maure/repos/basic-website/index.html ***

when copying images take out attributes unless you're messing with that -- that is where you'd mess with size BTW (style attribute) so instead of <img src = "SnakePic.jpg" ... attributes-list/> if not messing with size etc simple version is <img src = "SnakePic.jpg"/> (might work or they may require a alt attribute)

most of the HTML tags can also have attributes, which are extra bits of information.

An attribute is used to define the characteristics of an HTML element and is placed inside the element's opening tag. All attributes are made up of two parts − a name and a value

The name is the property you want to set. For example, the paragraph <p> element in the example carries an attribute whose name is align, which you can use to indicate the alignment of paragraph on the page.

The value is what you want the value of the property to be set and always put within quotations. The below example shows three possible values of align attribute: left, center and right. https://www.tutorialspoint.com/html/html_attributes.htm

to look at the other kids' websites -- go to their link -- then in github pull down the green "Code" button to copy the link, then clone:

i.e.
https://github.com/okThisIsTony/basic-website.git

here's how to look at it after i cloned and then again did the run and debug/chrome thing here (run and debug is the sideways triangleish thing about four down on left)

to check out Anthony's first website file:///C:/Users/maure/repos/Anthony%20basic%20website/basic-website/index.html
to check out Caleb's first website file:///C:/Users/maure/repos/Caleb%20basic%20website/basic-website/index.html
to check out King's first website file:///C:/Users/maure/repos/King%20basic%20website/basic-website/index.html
 as of 10/23 11:20 a.m.:
champion's is up but empty: https://github.com/champslays/basic-website
no caleb J
no isaiah
no noah

for future -- don't want to be in my basic website to clone -- same name 

also tim to caleb about absolute file path etc: One thing that you will want to do is to move or make a copy of the image and put it in your basic-website folder next to the index.html.  Then reference the image in your repo.  Right now you have what is called an absolute file path (/home/caleb/Pictures/joe-cool.jpeg).  You want to use a relative file path that starts where the index.html file is, so if the joe-cool.jpeg image was in your repo, you would just type "joe-cool.jpeg".  Also, you need to add a hyperlink to your website.  The tag for it in HTML is an <a></a> tag.

The target Attribute
We have used target attribute in our previous example. This attribute is used to specify the location where linked document is opened.
go here for more -- https://www.tutorialspoint.com/html/html_text_links.htm -- definitely helpful options and examples i.e.:
<body>
      <p>Click any of the following links</p>
      <a href = "/html/index.htm" target = "_blank">Opens in New</a> |
      <a href = "/html/index.htm" target = "_self">Opens in Self</a> |
      <a href = "/html/index.htm" target = "_parent">Opens in Parent</a> |
      <a href = "/html/index.htm" target = "_top">Opens in Body</a>
   </body>

   as of 11:20 a.m. 10/23, finished with Oct. 3 homework -- pushing this before pick up with Oct. 11

   Oct. 11 homework: This week we will be looking at CSS.  Please watch this video and follow along with it to add some styling to your basic-website web pages.  Go ahead and use your internet searching skills to find different styles and cool things you can do to spice up your website.  Have fun! https://youtu.be/XhcGodUSVyU

   link command unique -- don't need a / to close, only one command within

   tim note -- almost impossible to copy the code unless write it down separately, at least with my screen (see 5:09 css video) 

   to do 
   -- make my snake picture way, way smaller (figure out how to size)
   -- mess with border more?
   -- center heading over image?
   -- (Tim to consider later): suggest update or add note to Luke-style or redo the video Add CSS to a Website to note another way than run and debug to see their website -- super important they keep their line for that from the first time: file:///C:/Users/maure/repos/basic-website/index.html (maybe save as a favorite)
   -- suggest: can't emphasize enough to expect what shown might not work with constantly changing version and etc. -- if something in a video doesn't work for you, start investigating 
   
   committing 2:40 p.m. 10-23 post basic CSS styling -- Oct. 11 homework

(Oct. 17 homework as of 11-10-23 Tim talk, not a necessity -- might help to circle back)

  (not sure where below is from -- the javascript Oct. 24 homework?)
   create a repo 
   quickest way: 
   create repo 

   ctrl (command on mac) shift plus = zoom in (i.e. make terminal letters bigger)
   file:///C:/Users/maure/repos/javascript-website/index.html for that site 

   button onclick to add a button then make it do something -- getting into javascript!
   https://www.youtube.com/watch?v=edFC51qNWoU between 6 minutes and 6:30

   a pure javascript file will always have a .js at the end
   you need to close a carrot for it to pop up the rest of code 
   i.e. <button by itself won't add anything
   but <button> IT will add </button> automatically

   call a method=?
   document is a magic word that references what's on your index.html file?
   when say getElementbyID (followed for example by output)-- hey we're looking for a specific element that has the id of "output" -- about 11 minutes 51 seconds in https://www.youtube.com/watch?v=edFC51qNWoU
   super important you call (the method?) the correct title -- "OnPress" will not call "OnClick" etc.
   in javascript should have ; at end of each line *of code* 

   11/10/23 Check in 
   Done (through) Oct. 11
   Haven't done Oct. 17 but Tim says not a must (a placeholder, give kids caught up something to solidify, give those behind a chance to catch up)
   Priority is Oct. 23 -- continuing with building javascript
   Haven't done Oct. 31 but again Tim says not a must (a placeholder, give kids caught up something to solidify, give those behind a chance to catch up)

Picking back up video at 15 minutes -- doing an input
48 minutes later by next diffuse -- to 16.41 of 22 minutes. hoping now refamiliar will go more quickly? had to circle back to even see ( vs {})
yes done within 13 minutes

10:06 a.m. going to post website; 10:11 looking at 10/31 homework video -- til 10:20 oh my goodness too tiny blurry to see
10:20 a.m. going to start playing with it (only 2 views in 8 days)
10:23 stumped -- "In the mini-browser, open the menu by clicking the “hamburger” icon in the upper right corner." -- i see nothing like that. google mini browser -- try on mobile site -- google hamburger. LOOKING FOR ACTUAL HAMBURGER. no idea that's "A hamburger icon (slide drawer navigation) is a navigational symbol in user interface (UI) design. It consists of three stacked horizontal lines that indicate the presence and location of a hidden menu." by 10:28 back to it (had to start over going back to first page but done by 10:30)
done next by 10:32 -- but cooked for now.

11/14/23 5:37 a.m. about "showing you how to reference objects" in JavaScript Objects and Arrays you tube video around minute around 13:58 "const" is a good keyword to use (you should?) use for defining a variable" -- verify that with him?

objects are represented by curly brackets { } and by key-value pairs

keys have (need) quotes in json, not in javascript file (json -- a configuration file -- is javascript object notation)

A configuration file, often shortened to config file, defines the parameters, options, settings and preferences applied to operating systems. A configuration file (config file) is code on your computer that allows the selection of various features and settings. It can determine parameters, preferences, and alternative options in the many realms of your IT environment.

Tim: "Javascript object notation" (JSON) is what's used to send (things) send data over the internet from back-end APIs....can be converted into an object if you receive it it looks just like but the one key difference is with JSON, the keys have quotes around them

Google (what are back-end APIs) 
(1) A back-end API is a programming interface that helps developers to interact with back-end services for example server. 
(2) What is Back-End Development? The back-end, also called the server-side, consists of the server which provides data on request, the application that channels it, and the database which organizes the information. For example, when a customer browses shoes on a website, they are interacting with the front end.
(3) What is backend servers? The backend (or “server side”) is the portion of the website you don't see. It's responsible for storing and organizing data, and ensuring everything on the client-side actually works. The backend communicates with the frontend, sending and receiving information to be displayed as a web page.
(4) The backend refers to devices that respond to ending user activities or requests, for example, routers, network servers, and email servers.

argh minute 16:12-16 somewhere says "look at this says "hello bob" -- you have to watch his cursor. pop up window is distracting!

const is the default, if you're going to change the value later you would use a let

babe you type so fast -- i have to pause to follow exactly and then verify what i''m missing if it doesn't work, etc. 20 minute video going on 3 hours of work -- not to mention stopping to google to look up what you assume i retained from a reference in the past, etc. Lord God reveal to me what's for his good, the kids' good, the parents' good here that is mine to do -- or not do. This isn't a complaint that it's hours -- it's a reality he needs to consider if he wants to be a success if he wants to love them for their good -- sensible expectations, sensible trajectory. For himself too -- driving himself into the ground.

clear difference between strings and objects -- but doesn't clarify why use a (more complicated appearing) object over a string this is just a list of strings whereas this is a list of strings that have objects in them -- but WHY. feels left hanging

So. Much. Information. Needs more intentionality about capacity -- just does. 

i.e. 0 is the first object in a list

list tends to be more complex; array tends to be more simple. Using list to help you understand what it is; array is basically a list of values. 
